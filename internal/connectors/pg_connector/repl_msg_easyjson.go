// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package pg_connector

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5de6e169DecodeGithubComPianoyeg94RabbitmqConnectInternalConnectorsPgConnector(in *jlexer.Lexer, out *ReplMsgIterator) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nextlsn":
			out.NextLSNStr = string(in.String())
		case "change":
			if in.IsNull() {
				in.Skip()
				out.Changes = nil
			} else {
				in.Delim('[')
				if out.Changes == nil {
					if !in.IsDelim(']') {
						out.Changes = make([]struct {
							Kind       string        `json:"kind"`
							Columnvals []interface{} `json:"columnvalues"`
						}, 0, 1)
					} else {
						out.Changes = []struct {
							Kind       string        `json:"kind"`
							Columnvals []interface{} `json:"columnvalues"`
						}{}
					}
				} else {
					out.Changes = (out.Changes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						Kind       string        `json:"kind"`
						Columnvals []interface{} `json:"columnvalues"`
					}
					easyjson5de6e169Decode(in, &v1)
					out.Changes = append(out.Changes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5de6e169EncodeGithubComPianoyeg94RabbitmqConnectInternalConnectorsPgConnector(out *jwriter.Writer, in ReplMsgIterator) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nextlsn\":"
		out.RawString(prefix[1:])
		out.String(string(in.NextLSNStr))
	}
	{
		const prefix string = ",\"change\":"
		out.RawString(prefix)
		if in.Changes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Changes {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson5de6e169Encode(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReplMsgIterator) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5de6e169EncodeGithubComPianoyeg94RabbitmqConnectInternalConnectorsPgConnector(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReplMsgIterator) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5de6e169EncodeGithubComPianoyeg94RabbitmqConnectInternalConnectorsPgConnector(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReplMsgIterator) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5de6e169DecodeGithubComPianoyeg94RabbitmqConnectInternalConnectorsPgConnector(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReplMsgIterator) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5de6e169DecodeGithubComPianoyeg94RabbitmqConnectInternalConnectorsPgConnector(l, v)
}
func easyjson5de6e169Decode(in *jlexer.Lexer, out *struct {
	Kind       string        `json:"kind"`
	Columnvals []interface{} `json:"columnvalues"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "kind":
			out.Kind = string(in.String())
		case "columnvalues":
			if in.IsNull() {
				in.Skip()
				out.Columnvals = nil
			} else {
				in.Delim('[')
				if out.Columnvals == nil {
					if !in.IsDelim(']') {
						out.Columnvals = make([]interface{}, 0, 4)
					} else {
						out.Columnvals = []interface{}{}
					}
				} else {
					out.Columnvals = (out.Columnvals)[:0]
				}
				for !in.IsDelim(']') {
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					out.Columnvals = append(out.Columnvals, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5de6e169Encode(out *jwriter.Writer, in struct {
	Kind       string        `json:"kind"`
	Columnvals []interface{} `json:"columnvalues"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix[1:])
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"columnvalues\":"
		out.RawString(prefix)
		if in.Columnvals == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Columnvals {
				if v5 > 0 {
					out.RawByte(',')
				}
				if m, ok := v6.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v6.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v6))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
